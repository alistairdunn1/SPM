//============================================================================
// Name        : CLayerVaryingExploitationRateByeventProcess.cpp
// Author      : S. Mormede
// Date        : 30/01/2018
// Copyright   : Copyright NIWA Science ï¿½2008 - www.niwa.co.nz
// Description :
// $Date: 2008-03-04 16:33:32 +1300 (Tue, 04 Mar 2008) $
//============================================================================

// Global Headers
#include <iostream>
#include <boost/lexical_cast.hpp>

// Local Headers
#include "CLayerVaryingExploitationRateByeventProcess.h"
#include "../../Layers/CLayerManager.h"
#include "../../TimeSteps/CTimeStepManager.h"
#include "../../Layers/Numeric/Base/CNumericLayer.h"
#include "../../Layers/Integer/Base/CIntLayer.h"
#include "../../Selectivities/CSelectivity.h"
#include "../../Helpers/CError.h"
#include "../../Helpers/CComparer.h"
#include "../../Helpers/CConvertor.h"
#include "../../Helpers/CMath.h"
#include "../../Helpers/ForEach.h"

// Using
using std::cout;
using std::endl;

//**********************************************************************
// CLayerVaryingExploitationRateByeventProcess::CLayerVaryingExploitationRateByeventProcess()
// Default Constructor
//**********************************************************************
CLayerVaryingExploitationRateByeventProcess::CLayerVaryingExploitationRateByeventProcess()
{
  // Variables
  pTimeStepManager = CTimeStepManager::Instance();
  sType = PARAM_LAYER_VARYING_EXPLOITATION_RATE_BYEVENT;
  bRequiresMerge = false;

  // Register user allowed parameters
  pParameterList->registerAllowed(PARAM_CATEGORIES);
  pParameterList->registerAllowed(PARAM_YEARS);
  pParameterList->registerAllowed(PARAM_U);
  pParameterList->registerAllowed(PARAM_U_MAX);
  pParameterList->registerAllowed(PARAM_SELECTIVITIES);
  pParameterList->registerAllowed(PARAM_LAYERS);
  pParameterList->registerAllowed(PARAM_EVENT_LAYERS);
}

//**********************************************************************
// int CLayerVaryingExploitationRateByeventProcess::getYears(int index)
// Return the years entry from vector @ index
//**********************************************************************
int CLayerVaryingExploitationRateByeventProcess::getYears(int index)
{
  return vYearsList[index];
}

//**********************************************************************
// string CLayerVaryingExploitationRateByeventProcess::getLayers(int index)
// Return the layers entry in vector at index
//**********************************************************************
string CLayerVaryingExploitationRateByeventProcess::getLayers(int index)
{
  return vLayersList[index];
}

//**********************************************************************
// string CLayerVaryingExploitationRateByeventProcess::getEventLayers(int index)
// Return the event layers entry in vector at index
//**********************************************************************
string CLayerVaryingExploitationRateByeventProcess::getEventLayers(int index)
{
  return vEventLayersList[index];
}

//**********************************************************************
// void CLayerVaryingExploitationRateByeventProcess::validate()
// Validate our process
//**********************************************************************
void CLayerVaryingExploitationRateByeventProcess::validate()
{
  try
  {

    // Get our parameters
    dUMax = pParameterList->getDouble(PARAM_U_MAX, true, 0.99);
    pParameterList->fillVector(vCategoryList, PARAM_CATEGORIES);
    pParameterList->fillVector(vSelectivityList, PARAM_SELECTIVITIES);
    pParameterList->fillVector(vRates, PARAM_U);
    pParameterList->fillVector(vYearsList, PARAM_YEARS);
    pParameterList->fillVector(vLayersList, PARAM_LAYERS);
    pParameterList->fillVector(vEventLayersList, PARAM_EVENT_LAYERS);

    // Base Validation
    CProcess::validate();

    // Register Estimables
    for (int i = 0; i < (int)vRates.size(); ++i)
      registerEstimable(PARAM_U, i, &vRates[i]);

    // local validation
    if (dUMax >= ONE)
      CError::errorGreaterThanEqualTo(PARAM_U_MAX, PARAM_ONE);
    if (dUMax <= TRUE_ZERO)
      CError::errorLessThanEqualTo(PARAM_U_MAX, PARAM_ZERO);

    if (vCategoryList.size() != vRates.size())
      CError::errorListSameSize(PARAM_CATEGORIES, PARAM_U);
    if (vCategoryList.size() != vSelectivityList.size())
      CError::errorListSameSize(PARAM_CATEGORIES, PARAM_SELECTIVITIES);
    if (vYearsList.size() != vLayersList.size())
      CError::errorListSameSize(PARAM_YEARS, PARAM_LAYERS);
    if (vYearsList.size() != vEventLayersList.size())
      CError::errorListSameSize(PARAM_YEARS, PARAM_EVENT_LAYERS);

    // Duplicate Year check
    map<int, int> mYears;
    foreach (int Year, vYearsList)
    {
      mYears[Year]++;
      if (mYears[Year] > 1)
        CError::errorDuplicate(PARAM_YEAR, boost::lexical_cast<string>(Year));
    }
  }
  catch (string &Ex)
  {
    Ex = "CLayerVaryingExploitationRateByeventProcess.validate(" + getLabel() + ")->" + Ex;
    throw Ex;
  }
}

//**********************************************************************
// void CLayerVaryingExploitationRateByeventProcess::build()
// Build our process
//**********************************************************************
void CLayerVaryingExploitationRateByeventProcess::build()
{
  try
  {
    // Base Build
    CProcess::build();

    // Build our Layer Index
    CLayerManager *pLayerManager = CLayerManager::Instance();
    pLayerManager->fillVector(vLayersIndex, vLayersList);

    // Build our EventLayer Index
    CLayerManager *pEventLayerManager = CLayerManager::Instance();
    pEventLayerManager->fillVector(vEventLayersIndex, vEventLayersList);
  }
  catch (string &Ex)
  {
    Ex = "CLayerVaryingExploitationRateByeventProcess.build(" + getLabel() + ")->" + Ex;
    throw Ex;
  }
}

//**********************************************************************
// void CLayerVaryingExploitationRateByeventProcess::execute()
// execute this Process
//**********************************************************************
void CLayerVaryingExploitationRateByeventProcess::execute()
{
#ifndef OPTIMIZE
  try
  {
#endif
    // See if we are suppose to be executing first
    bYearMatch = false;
    iCurrentYear = pTimeStepManager->getCurrentYear();
    for (int i = 0; i < (int)vYearsList.size(); ++i)
    {
      if (vYearsList[i] == iCurrentYear)
      {
        bYearMatch = true;
        pLayer = vLayersIndex[i];
        pEventLayer = vEventLayersIndex[i];
        break;
      }
    }

    // No Match. Don't Execute
    if (!bYearMatch)
      return;

    // Base execute
    CProcess::execute();

    // Loop Through The World Grid (i,j)
    for (int i = 0; i < iWorldHeight; ++i)
    {
      for (int j = 0; j < iWorldWidth; ++j)
      {
        // Get Current Square
        pBaseSquare = pWorld->getBaseSquare(i, j);
        if (!pBaseSquare->getEnabled())
          continue;

        // Get Layer Values
        dExp = pLayer->getValue(i, j);
        iEvent = pEventLayer->getValue(i, j);

        // Loop Through Categories & Work out exploitation rate
        for (int k = 0; k < (int)vCategoryIndex.size(); ++k)
        {
          for (int l = 0; l < iBaseColCount; ++l)
          {
            // Get Our Selectivity Result
            dSelectivityResult = vSelectivityIndex[k]->getResult(l);
            // Calculate Our Value
            double dValue = vRates[k] * dSelectivityResult;

            // Multiply it by Layer Value
            // if (pLayer != 0) // SM: I don't think we need that as we always need a layer
            dValue *= dExp;

            if (dValue > dUMax)
            {
              dValue = dUMax;
            }
            else if (dValue < TRUE_ZERO)
            {
              dValue = 0.0;
            }

            // loop through the number of events
            for (int n = 0; n < iEvent; ++n)
            {

              // Get Current Value
              dCurrent = pBaseSquare->getValue(vCategoryIndex[k], l);

              // Check 0
              if (CComparer::isZero(dCurrent))
                continue;

              // Get Amount To Subtract
              dCurrent *= dValue;

              // Do Add/Subs
              pBaseSquare->subValue(vCategoryIndex[k], l, dCurrent);
            }
          }
        }
      }
    }

#ifndef OPTIMIZE
  }
  catch (string &Ex)
  {
    Ex = "CLayerVaryingExploitationRateByeventProcess.execute(" + getLabel() + ")->" + Ex;
    throw Ex;
  }
#endif
}

//**********************************************************************
// CLayerVaryingExploitationRateByeventProcess::~CLayerVaryingExploitationRateByeventProcess()
// Destructor
//**********************************************************************
CLayerVaryingExploitationRateByeventProcess::~CLayerVaryingExploitationRateByeventProcess()
{
}
