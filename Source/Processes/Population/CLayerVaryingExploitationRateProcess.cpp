//============================================================================
// Name        : CLayerVaryingExploitationRateProcess.cpp
// Author      : S. Mormede
// Date        : 30/01/2018
// Copyright   : Copyright NIWA Science ï¿½2008 - www.niwa.co.nz
// Description :
// $Date: 2008-03-04 16:33:32 +1300 (Tue, 04 Mar 2008) $
//============================================================================

// Global Headers
#include <boost/lexical_cast.hpp>
#include <iostream>

// Local Headers
#include "../../Helpers/CComparer.h"
#include "../../Helpers/CConvertor.h"
#include "../../Helpers/CError.h"
#include "../../Helpers/CMath.h"
#include "../../Helpers/ForEach.h"
#include "../../Layers/CLayerManager.h"
#include "../../Layers/Numeric/Base/CNumericLayer.h"
#include "../../Selectivities/CSelectivity.h"
#include "../../TimeSteps/CTimeStepManager.h"
#include "CLayerVaryingExploitationRateProcess.h"

// Using
using std::cout;
using std::endl;

//**********************************************************************
// CLayerVaryingExploitationRateProcess::CLayerVaryingExploitationRateProcess()
// Default Constructor
//**********************************************************************
CLayerVaryingExploitationRateProcess::CLayerVaryingExploitationRateProcess() {
  // Variables
  pTimeStepManager = CTimeStepManager::Instance();
  sType            = PARAM_LAYER_VARYING_EXPLOITATION_RATE;
  bRequiresMerge   = false;

  // Register user allowed parameters
  pParameterList->registerAllowed(PARAM_CATEGORIES);
  pParameterList->registerAllowed(PARAM_YEARS);
  pParameterList->registerAllowed(PARAM_U);
  pParameterList->registerAllowed(PARAM_U_MAX);
  pParameterList->registerAllowed(PARAM_SELECTIVITIES);
  pParameterList->registerAllowed(PARAM_LAYERS);
}

//**********************************************************************
// int CLayerVaryingExploitationRateProcess::getYears(int index)
// Return the years entry from vector @ index
//**********************************************************************
int CLayerVaryingExploitationRateProcess::getYears(int index) {
  return vYearsList[index];
}

//**********************************************************************
// string CLayerVaryingExploitationRateProcess::getLayers(int index)
// Return the layers entry in vector at index
//**********************************************************************
string CLayerVaryingExploitationRateProcess::getLayers(int index) {
  return vLayersList[index];
}

//**********************************************************************
// void CLayerVaryingExploitationRateProcess::validate()
// Validate our process
//**********************************************************************
void CLayerVaryingExploitationRateProcess::validate() {
  try {
    // Get our parameters
    dUMax = pParameterList->getDouble(PARAM_U_MAX, true, 0.99);
    pParameterList->fillVector(vCategoryList, PARAM_CATEGORIES);
    pParameterList->fillVector(vSelectivityList, PARAM_SELECTIVITIES);
    pParameterList->fillVector(vRates, PARAM_U);
    pParameterList->fillVector(vYearsList, PARAM_YEARS);
    pParameterList->fillVector(vLayersList, PARAM_LAYERS);

    // Base Validation
    CProcess::validate();

    // Register Estimables
    for (int i = 0; i < (int)vRates.size(); ++i) registerEstimable(PARAM_U, i, &vRates[i]);

    // local validation
    if (dUMax >= ONE)
      CError::errorGreaterThanEqualTo(PARAM_U_MAX, PARAM_ONE);
    if (dUMax <= TRUE_ZERO)
      CError::errorLessThanEqualTo(PARAM_U_MAX, PARAM_ZERO);

    if (vCategoryList.size() != vRates.size())
      CError::errorListSameSize(PARAM_CATEGORIES, PARAM_U);
    if (vCategoryList.size() != vSelectivityList.size())
      CError::errorListSameSize(PARAM_CATEGORIES, PARAM_SELECTIVITIES);
    if (vYearsList.size() != vLayersList.size())
      CError::errorListSameSize(PARAM_YEARS, PARAM_LAYERS);

    // Duplicate Year check
    map<int, int> mYears;
    foreach (int Year, vYearsList) {
      mYears[Year]++;
      if (mYears[Year] > 1)
        CError::errorDuplicate(PARAM_YEAR, boost::lexical_cast<string>(Year));
    }
  } catch (string& Ex) {
    Ex = "CLayerVaryingExploitationRateProcess.validate(" + getLabel() + ")->" + Ex;
    throw Ex;
  }
}

//**********************************************************************
// void CLayerVaryingExploitationRateProcess::build()
// Build our process
//**********************************************************************
void CLayerVaryingExploitationRateProcess::build() {
  try {
    // Base Build
    CProcess::build();

    // Build our Layer Index
    CLayerManager* pLayerManager = CLayerManager::Instance();
    pLayerManager->fillVector(vLayersIndex, vLayersList);
  } catch (string& Ex) {
    Ex = "CLayerVaryingExploitationRateProcess.build(" + getLabel() + ")->" + Ex;
    throw Ex;
  }
}

//**********************************************************************
// void CLayerVaryingExploitationRateProcess::execute()
// execute this Process
//**********************************************************************
void CLayerVaryingExploitationRateProcess::execute() {
#ifndef OPTIMIZE
  try {
#endif
    // See if we are suppose to be executing first
    bYearMatch   = false;
    iCurrentYear = pTimeStepManager->getCurrentYear();
    for (int i = 0; i < (int)vYearsList.size(); ++i) {
      if (vYearsList[i] == iCurrentYear) {
        bYearMatch = true;
        pLayer     = vLayersIndex[i];
        break;
      }
    }

    // No Match. Don't Execute
    if (!bYearMatch)
      return;

    // Base execute
    CProcess::execute();

    // Loop Through The World Grid (i,j)
    for (int i = 0; i < iWorldHeight; ++i) {
      for (int j = 0; j < iWorldWidth; ++j) {
        // Get Current Square
        pBaseSquare = pWorld->getBaseSquare(i, j);
        if (!pBaseSquare->getEnabled())
          continue;

        // Get Layer Value
        dExp = pLayer->getValue(i, j);

        // Loop Through Categories & Work out exploitation rate
        for (int k = 0; k < (int)vCategoryIndex.size(); ++k) {
          for (int l = 0; l < iBaseColCount; ++l) {
            // Get Our Selectivity Result
            dSelectivityResult = vSelectivityIndex[k]->getResult(l);
            // Calculate Our Value
            double dValue = vRates[k] * dSelectivityResult;

            // Multiply it by Layer Value
            // if (pLayer != 0) // SM: I don't think we need that as we always need a layer
            dValue *= dExp;

            if (dValue > dUMax) {
              dValue = dUMax;
            } else if (dValue < TRUE_ZERO) {
              dValue = 0.0;
            }

            // Get Current Value
            dCurrent = pBaseSquare->getValue(vCategoryIndex[k], l);

            // Check 0
            if (CComparer::isZero(dCurrent))
              continue;

            // Get Amount To Subtract
            dCurrent *= dValue;

            // Do Add/Subs
            pBaseSquare->subValue(vCategoryIndex[k], l, dCurrent);
          }
        }
      }
    }

#ifndef OPTIMIZE
  } catch (string& Ex) {
    Ex = "CLayerVaryingExploitationRateProcess.execute(" + getLabel() + ")->" + Ex;
    throw Ex;
  }
#endif
}

//**********************************************************************
// CLayerVaryingExploitationRateProcess::~CLayerVaryingExploitationRateProcess()
// Destructor
//**********************************************************************
CLayerVaryingExploitationRateProcess::~CLayerVaryingExploitationRateProcess() {}
